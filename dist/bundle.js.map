{
  "version": 3,
  "sources": ["../src/constants.js", "../src/utils.js", "../src/data.js", "../src/ui/render_summary_table.js", "../src/ui/render_day_summary.js", "../src/ui/render_hours_table.js", "../src/ui/controller.js", "../src/ui/render_tabs.js", "../src/ui/events.js", "../main.js"],
  "sourcesContent": ["export const elements = {\r\n    // tabs\r\n    tabs: document.getElementById('tabs'),\r\n    // tables\r\n    hoursTable: document.getElementById('hoursTable'),\r\n    hoursTableBody: document.getElementById('hoursTableBody'),\r\n    summary: document.getElementById('summary'),\r\n    // hours-summary\r\n    workTime: document.querySelector('.work-time .number'),\r\n    breakTime: document.querySelector('.break-time .number'),\r\n    totalTimeLeft: document.querySelector('.total-time-left .number'),\r\n    ticketsCount: document.querySelector('.tickets-count .number'),\r\n    ticketsCountLabel: document.querySelector('.tickets-count .label'),\r\n    // hours-summary timeline\r\n    timelineOther: document.querySelector('.timeline .other'),\r\n    timelineTicket: document.querySelector('.timeline .ticket'),\r\n    timelineBreak: document.querySelector('.timeline .break'),\r\n    timelineMeeting: document.querySelector('.timeline .meeting'),\r\n    // buttons\r\n    toggleSummaryBtn: document.getElementById('toggleSummaryBtn'),\r\n};\r\n\r\nexport const locators = {\r\n    entryTime: '#hoursTable input[type=\"time\"]',\r\n    entryDescription: '#hoursTable input.description',\r\n    entryTypeBtn: 'button.action.type',\r\n    entryDeleteBtn: 'button.action.delete',\r\n};\r\n\r\nexport const types = [\r\n    {priority: 2, label: 'Work', emoji: '\u2800\\n', keywords: []},  // everything else\r\n    {priority: 0, label: 'Ticket', emoji: '\uD83D\uDCD8\uFE0F', keywords: []}, // identified by ticket regex\r\n    {priority: 1, label: 'Meeting', emoji: '\uD83D\uDCDE', keywords: ['meet', 'call', 'ask', 'msg', 'message']},\r\n    {priority: 3, label: 'Break', emoji: '\uD83E\uDDCB', keywords: ['ara', 'break', 'lunch']},\r\n];", "import {elements, locators, types} from './constants';\r\n\r\n// Identifiers\r\n\r\nexport function uid() {\r\n    return 'e' + Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\r\n}\r\n\r\nexport function todayKey() {\r\n    const d = new Date();\r\n    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;\r\n}\r\n\r\n// HTML\r\n\r\nexport function findLast(arr, predicate) {\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        if (predicate(arr[i])) return arr[i];\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function focusLastDescription() {\r\n    const inputs = elements.hoursTableBody.querySelectorAll(locators.entryDescription);\r\n    if (inputs.length) {\r\n        inputs[inputs.length - 1].focus();\r\n    }\r\n}\r\n\r\n// Time\r\n\r\nexport function timeNow() {\r\n    const d = new Date();\r\n    return `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n}\r\n\r\nexport function parseHM(time) {\r\n    if (!time || !/^\\d{2}:\\d{2}$/.test(time)) return null;\r\n    const [h, m] = time.split(':').map(Number);\r\n    if (h > 23 || m > 59) return null;\r\n    return h * 60 + m;\r\n}\r\n\r\n/**\r\n * Round to nearest 5 minutes (300s)\r\n */\r\nexport function roundHM(value) {\r\n    // value is \"HH:MM\" or \"HH:MM:SS\"\r\n    if (!value) return value;\r\n\r\n    const stepSeconds = 300\r\n    const parts = value.split(\":\").map(Number);\r\n    let [h, m, s = 0] = parts;\r\n\r\n    let totalSeconds = h * 3600 + m * 60 + s;\r\n    let rounded = Math.round(totalSeconds / stepSeconds) * stepSeconds;\r\n\r\n    // clamp back to 24h\r\n    rounded = Math.max(0, Math.min(24 * 3600 - 1, rounded));\r\n\r\n    const hh = String(Math.floor(rounded / 3600)).padStart(2, \"0\");\r\n    const mm = String(Math.floor((rounded % 3600) / 60)).padStart(2, \"0\");\r\n    const ss = String(rounded % 60).padStart(2, \"0\");\r\n\r\n    return stepSeconds >= 60 ? `${hh}:${mm}` : `${hh}:${mm}:${ss}`;\r\n}\r\n\r\n\r\n// Format Time\r\n\r\nexport const pad = (n) => String(n).padStart(2, '0');\r\n\r\nexport function formatHM(minutes) {\r\n    const h = Math.floor(minutes / 60);\r\n    const m = minutes % 60;\r\n    return `${h}:${pad(m)}`;\r\n}\r\n\r\nexport function formatMinutes(minutes) {\r\n    const h = Math.floor(minutes / 60);\r\n    const m = minutes % 60;\r\n    if (h > 0) {\r\n        return `${h}h ${m}m`;\r\n    }\r\n    return `${m}m`;\r\n}\r\n\r\n// Format Text\r\n\r\nexport function formatDayName(dateStr) {\r\n    const [year, monthNum, dayNum] = dateStr.split('-').map(Number);\r\n    const date = new Date(year, monthNum - 1, dayNum);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const oneDayMs = 1000 * 60 * 60 * 24;\r\n    const daysDiff = Math.round((today - date) / oneDayMs);\r\n\r\n    // if (daysDiff === 0) return 'Today';\r\n    // if (daysDiff === 1) return 'Yesterday';\r\n\r\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    const dayFullNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n    const dayName = dayNames[date.getDay()];\r\n    const dayFullName = dayFullNames[date.getDay()];\r\n    const month = monthNames[date.getMonth()];\r\n    const day = date.getDate();\r\n\r\n    // Today\r\n    if (daysDiff === 0) return `${dayFullName}, ${month} ${day}`;\r\n\r\n    // This week\r\n    const startOfWeek = new Date(today);\r\n    const dayIndex = today.getDay() || 7; // convert Sunday (0) -> 7 to consider monday as the first day\r\n    startOfWeek.setDate(today.getDate() - (dayIndex - 1));\r\n    startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n    if (date >= startOfWeek) {\r\n        return dayName;\r\n    }\r\n\r\n    // Last week\r\n    const startOfLastWeek = new Date(startOfWeek);\r\n    startOfLastWeek.setDate(startOfWeek.getDate() - 7);\r\n\r\n    if (date >= startOfLastWeek) {\r\n        return `Last ${dayName}`;\r\n    }\r\n\r\n    // Older dates\r\n    return `${day} ${month}`;\r\n}\r\n\r\nexport function escapeHtml(str) {\r\n    return String(str)\r\n        .replaceAll('&', '&amp;')\r\n        .replaceAll('<', '&lt;')\r\n        .replaceAll('>', '&gt;');\r\n}\r\n\r\n// Entry\r\n\r\nexport function findTicketNumber(desc) {\r\n    // const match = desc.match(/\\b[a-zA-Z]+-\\d+\\b/);\r\n    // return match ? match[0] : null;\r\n    if (!desc) return null;\r\n    return desc.match(/\\b[a-zA-Z]+-\\d+\\b/);\r\n}\r\n\r\nexport function identifyTicketType(desc) {\r\n    if (!desc) return 0;\r\n    if (findTicketNumber(desc)) return 1;\r\n\r\n    for (let index = 0; index < types.length; index++) {\r\n        if (types[index].keywords.some(keyword => desc.includes(keyword))) {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}", "import {findLast, roundHM, timeNow, todayKey, uid} from \"./utils\";\r\n\r\nconst STORAGE_KEY = 'simpleTimesheetV3';\r\n\r\nexport class StateManager {\r\n    // Constructor / Init\r\n\r\n    constructor(storageKey) {\r\n        this.state = this.#loadState(storageKey);\r\n        this.openDay = this.state.openDay;\r\n        if (!this.state.days) this.state.days = {};\r\n        if (!this.state.openDay) this.setOpenDay(todayKey());\r\n\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    // State Load & Save\r\n\r\n    #loadState(storageKey) {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(storageKey)) || {};\r\n        } catch {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    #saveState() {\r\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(this.state));\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    // Day Management\r\n\r\n    getDayNames() {\r\n        return new Set(Object.keys(this.state.days || {}));\r\n    }\r\n\r\n    setOpenDay(day) {\r\n        this.openDay = day;\r\n        this.state.openDay = day;\r\n        this.#initEntries(day);\r\n        this.#saveState();\r\n    }\r\n\r\n    deleteDay(day) {\r\n        delete this.state.days[day];\r\n    }\r\n\r\n    // Entries\r\n\r\n    #initEntries(day) {\r\n        if (!this.state.days[day]) this.state.days[day] = [];\r\n    }\r\n\r\n    getEntries() {\r\n        this.#initEntries(this.state.openDay);\r\n        return this.state.days[this.state.openDay];\r\n    }\r\n\r\n    getLastEntry() {\r\n        const entries = this.getEntries();\r\n        return entries[entries.length - 1];\r\n    }\r\n\r\n    // Entry Management\r\n\r\n    newEntry(start, end, desc, type) {\r\n        this.getEntries().push({\r\n            id: uid(),\r\n            start: roundHM(start),\r\n            end: roundHM(end),\r\n            desc: desc,\r\n            type: type,\r\n        });\r\n        this.#saveState();\r\n        this.notify();\r\n    }\r\n\r\n    updateEntry(entryId, updates) {\r\n        const entries = this.getEntries();\r\n        const entry = entries.find(e => e.id === entryId);\r\n        if (!entry) return false;\r\n\r\n        Object.assign(entry, updates);\r\n        this.#saveState();\r\n        this.notify();\r\n        return true;\r\n    }\r\n\r\n    stopLastRunningEntry() {\r\n        const running = findLast(this.getEntries(), e => e.start && !e.end);\r\n        if (!running) return false;\r\n\r\n        running.end = roundHM(timeNow());\r\n        this.#saveState();\r\n        this.notify();\r\n        return true;\r\n    }\r\n\r\n    deleteEntry(indexOrId) {\r\n        const entries = this.getEntries();\r\n        let index = typeof indexOrId === 'number' ? indexOrId : entries.findIndex(e => e.id === indexOrId);\r\n        if (index === -1) return false;\r\n        entries.splice(index, 1);\r\n        this.#saveState();\r\n        this.notify();\r\n        return true;\r\n    }\r\n\r\n    moveEntry(fromIndex, toIndex) {\r\n        const entries = this.getEntries();\r\n        if (fromIndex === toIndex || fromIndex < 0 || toIndex < 0 || fromIndex >= entries.length || toIndex >= entries.length) return false;\r\n        const item = entries.splice(fromIndex, 1)[0];\r\n        entries.splice(toIndex, 0, item);\r\n        this.#saveState();\r\n        this.notify();\r\n        return true;\r\n    }\r\n\r\n    // Subscription / Notification\r\n\r\n    subscribe(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    notify() {\r\n        for (const l of this.listeners) l(this.state);\r\n    }\r\n}\r\n\r\nexport const stateManager = new StateManager(STORAGE_KEY);", "import {stateManager} from \"../data\";\r\nimport {findTicketNumber, formatMinutes, parseHM} from \"../utils\";\r\nimport {elements, types} from \"../constants\";\r\n\r\nelements.toggleSummaryBtn.addEventListener('click', toggleSummary);\r\n\r\nexport function toggleSummary() {\r\n    renderSummary();\r\n    elements.hoursTable.classList.toggle('hidden');\r\n    elements.summary.classList.toggle('hidden');\r\n}\r\n\r\nexport function isSummaryDisplayed() {\r\n    return !elements.summary.classList.contains('hidden');\r\n}\r\n\r\nexport function renderSummary() {\r\n    const grouped = []; // will store { type, key, minutes, descs }\r\n\r\n    // Count totals for matching entries\r\n    for (const entry of stateManager.getEntries()) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n\r\n        if (start === null || end === null || end < start) continue;\r\n\r\n        const minutes = end - start;\r\n        const entryDesc = entry.desc || '(no description)';\r\n        const entryType = entry.type ?? 0;\r\n\r\n        // Try to detect a Jira ticket key, e.g. \"TUE-250\"\r\n        const ticketMatch = findTicketNumber(entryDesc);\r\n\r\n        let key, desc;\r\n        if (!ticketMatch) {\r\n            key = entryDesc;\r\n            desc = null;\r\n        } else {\r\n            const ticketKey = ticketMatch[0].toUpperCase();\r\n            const ticketDesc = entryDesc.replace(ticketMatch[0], '').trim();\r\n            key = ticketKey;\r\n            desc = ticketDesc || null;\r\n        }\r\n\r\n        // find or create group\r\n        let group = grouped.find(g => g.type === entryType && g.key === key);\r\n        if (!group) {\r\n            group = {type: entryType, key, minutes: 0, descs: new Set()};\r\n            grouped.push(group);\r\n        }\r\n\r\n        group.minutes += minutes;\r\n        if (desc) group.descs.add(desc);\r\n    }\r\n\r\n    // No table\r\n    if (grouped.length === 0) {\r\n    }\r\n\r\n    // Sort: first by type, then by key alphabetically\r\n    grouped.sort((a, b) => {\r\n        const orderA = types[a.type].priority ?? 999;\r\n        const orderB = types[b.type].priority ?? 999;\r\n        if (orderA !== orderB) return orderA - orderB;\r\n        return a.key.localeCompare(b.key); // within type: A\u2013Z\r\n    });\r\n\r\n    // Build table\r\n    let html = `\r\n        <table id=\"summaryTable\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"duration\" style=\"width:100px;\">Duration</th>\r\n                    <th class=\"actions\" style=\"width:14px;\">Type</th>\r\n                    <th class=\"description\">Description</th>\r\n                    <th class=\"time\" style=\"width:70px;\"></th>\r\n                    <th class=\"time\" style=\"width:70px;\"></th>\r\n                    <th class=\"actions\" style=\"width:64px;\"></th>\r\n                    <th class=\"actions\" style=\"width:64px;\"></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n    `;\r\n\r\n    // Build rows\r\n    for (const g of grouped) {\r\n        let description = g.key;\r\n        if (g.descs.size > 0) {\r\n            description += ' - ' + [...g.descs].join(', ');\r\n        }\r\n\r\n        html += `\r\n            <tr disabled=\"true\">\r\n                <td class=\"duration\">${formatMinutes(g.minutes)}</td>\r\n                <td class=\"actions\"><button class=\"action bigger type type-${g.type}\" disabled>${types[g.type]?.emoji || \"\"}</button></td>\r\n                <td class=\"description\"><input type=\"text\" value=\"${escapeHtml(description)}\" disabled/></td>\r\n                <td class=\"time\"><input type=\"time\" step=\"60\" style=\"visibility: hidden\"></td>\r\n                <td class=\"time\"><input type=\"time\" step=\"60\" style=\"visibility: hidden\"></td>\r\n                <td class=\"actions\"></td>\r\n                <td class=\"actions\"></td>\r\n            </tr>\r\n        `;\r\n    }\r\n\r\n    html += \"</tbody></table>\";\r\n    elements.summary.innerHTML = html;\r\n}\r\n\r\n", "import {stateManager} from \"../data\";\r\nimport {findTicketNumber, formatMinutes, parseHM} from \"../utils\";\r\nimport {elements} from \"../constants\";\r\n\r\nexport function updateDayTotal() {\r\n    const minutes = {ticket: 0, meeting: 0, break: 0, other: 0, total: 0};\r\n    const uniqueTickets = new Set();\r\n\r\n    // count total minutes per entry type\r\n    for (const entry of stateManager.getEntries()) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n\r\n        if (start !== null && end !== null && end >= start) {\r\n            const duration = end - start;\r\n            const ticketMatch = findTicketNumber(entry.desc);\r\n            if (entry.type === 1 || ticketMatch) {\r\n                uniqueTickets.add(ticketMatch ? ticketMatch[0] : '(no ticket number)');\r\n                minutes.ticket += duration;\r\n            } else if (entry.type === 2)\r\n                minutes.meeting += duration;\r\n            else if (entry.type === 3)\r\n                minutes.break += duration;\r\n            else minutes.other += duration;\r\n        }\r\n    }\r\n\r\n    // sum total\r\n    minutes.total = minutes.ticket + minutes.meeting + minutes.break + minutes.other;\r\n    // hours\r\n    elements.workTime.textContent = formatMinutes(minutes.total - minutes.break);\r\n    elements.totalTimeLeft.textContent = formatMinutes((8 * 60) - minutes.total);\r\n    elements.breakTime.textContent = formatMinutes(minutes.break);\r\n    // ticket count\r\n    elements.ticketsCount.textContent = uniqueTickets.size + '';\r\n    elements.ticketsCountLabel.textContent = uniqueTickets.size === 1 ? 'ticket' : 'tickets';\r\n    // timeline percentage based on 8 hours\r\n    const maxDayMinutes = 8 * 60;\r\n    elements.timelineOther.style.width = (minutes.other / maxDayMinutes) * 100 + '%';\r\n    elements.timelineTicket.style.width = (minutes.ticket / maxDayMinutes) * 100 + '%';\r\n    elements.timelineBreak.style.width = (minutes.break / maxDayMinutes) * 100 + '%';\r\n    elements.timelineMeeting.style.width = (minutes.meeting / maxDayMinutes) * 100 + '%';\r\n}", "import {elements, locators, types} from '../constants';\r\nimport {formatMinutes, identifyTicketType, parseHM, roundHM} from '../utils';\r\nimport {stateManager} from \"../data\";\r\nimport {updateDayTotal} from \"./render_day_summary\";\r\nimport {renderAll} from \"./controller\";\r\n\r\nconst gapRows = new Map();\r\n\r\n// --------- Hours Table //\r\n\r\nexport function renderHoursTable() {\r\n    const entries = stateManager.getEntries();\r\n    const tbody = elements.hoursTableBody;\r\n    tbody.innerHTML = '';\r\n    gapRows.clear();\r\n\r\n    entries.forEach((entry, index) => {\r\n        const row = createTableRow(entry, index, entries);\r\n        tbody.appendChild(row);\r\n\r\n        // Create gap after previous entry\r\n        if (index > 0) updateGapAfter(entries[index - 1]);\r\n    });\r\n\r\n    initSmoothRowDnD(tbody, entries);\r\n}\r\n\r\nfunction createTableRow(entry, index, entries) {\r\n    const tr = document.createElement('tr');\r\n    tr.dataset.entryId = entry.id;\r\n\r\n    tr.ondragover = (ev) => ev.preventDefault();\r\n    tr.ondrop = (ev) => {\r\n        ev.preventDefault();\r\n        const from = +ev.dataTransfer.getData('text/plain');\r\n        const to = index;\r\n        if (from !== to) {\r\n            stateManager.moveEntry(from, to);\r\n            renderAll();\r\n        }\r\n    };\r\n\r\n    const durationCell = createDurationCell();\r\n\r\n    // Create start and end cells and update duration when input changes\r\n    const startCell = createTimeCell(entry, 'start', () => updateDurationCell(entry, durationCell));\r\n    const endCell = createTimeCell(entry, 'end', () => updateDurationCell(entry, durationCell));\r\n\r\n    tr.appendChild(durationCell);\r\n    tr.appendChild(createTypeCell(entry));\r\n    tr.appendChild(createDescriptionCell(entry));\r\n    tr.appendChild(startCell);\r\n    tr.appendChild(endCell);\r\n    tr.appendChild(createDeleteCell(index));\r\n    tr.appendChild(createDragHandleCell());\r\n\r\n    // Initialize duration immediately\r\n    updateDurationCell(entry, durationCell);\r\n\r\n    return tr;\r\n}\r\n\r\n// Time\r\n\r\nfunction createTimeCell(entry, field, onChange) {\r\n    const td = document.createElement('td');\r\n    const input = document.createElement('input');\r\n    td.classList.add('time');\r\n    input.type = 'time';\r\n    input.step = 60;\r\n    input.value = entry[field] || '';\r\n    input.dataset.field = field;\r\n\r\n    input.onblur = () => {\r\n        if (input.value) {\r\n            input.value = roundHM(input.value);\r\n            update(input.value);\r\n        }\r\n    };\r\n\r\n    input.oninput = () => {\r\n        update(input.value);\r\n    };\r\n\r\n    function update(newValue) {\r\n        let initialValue = entry[field];\r\n\r\n        const entries = stateManager.getEntries();\r\n        const index = entries.indexOf(entry);\r\n\r\n        // --- SNAP LOGIC ---\r\n        // update next entry\u2019s input as well\r\n        if (field === \"end\" && index < entries.length - 1) {\r\n            const next = entries[index + 1];\r\n            if (next.start === initialValue) {\r\n                const nextCell = document.querySelector(`tr[data-entry-id=\"${next.id}\"] input[data-field=\"start\"]`);\r\n                nextCell.value = newValue;\r\n                stateManager.updateEntry(next.id, {start: newValue});\r\n            }\r\n        }\r\n\r\n        // update previous entry\u2019s input as well\r\n        if (field === \"start\" && index > 0) {\r\n            const prev = entries[index - 1];\r\n            if (prev.end === initialValue) {\r\n                const prevCell = document.querySelector(`tr[data-entry-id=\"${prev.id}\"] input[data-field=\"end\"]`);\r\n                if (prevCell) {\r\n                    prevCell.value = newValue;\r\n                    stateManager.updateEntry(prev.id, {end: newValue});\r\n                }\r\n            }\r\n        }\r\n\r\n        // save the entry and update\r\n        stateManager.updateEntry(entry.id, {[field]: newValue});\r\n        updateDayTotal();\r\n\r\n        // update gaps\r\n        if (index > 0) updateGapAfter(entries[index - 1]);\r\n        updateGapAfter(entry);\r\n\r\n        if (onChange) onChange();\r\n    }\r\n\r\n    td.appendChild(input);\r\n    return td;\r\n}\r\n\r\nfunction createDurationCell() {\r\n    const td = document.createElement('td');\r\n    td.classList.add('duration');\r\n    td.textContent = '-'; // default\r\n    return td;\r\n}\r\n\r\nfunction updateDurationCell(entry, td) {\r\n    if (entry.start && entry.end) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n        const minutes = end - start;\r\n        if (minutes === 0)\r\n            td.textContent = '';\r\n        else td.textContent = formatMinutes(minutes);\r\n    } else {\r\n        td.textContent = '';\r\n    }\r\n}\r\n\r\n// Description\r\n\r\nfunction createTypeCell(entry) {\r\n    const td = document.createElement('td');\r\n    const btn = document.createElement('button');\r\n    btn.classList.add('actions');\r\n    btn.classList.add('action');\r\n    btn.classList.add('bigger');\r\n    btn.classList.add('type');\r\n    btn.classList.add('type-' + entry.type);\r\n\r\n    // default type if not set\r\n    // if (typeof entry.type !== 'number') {\r\n    //     entry.type = 0; // Work\r\n    // }\r\n    //\r\n    // if (entry.type === 99) {\r\n    //     // entry.type = 0;\r\n    // }\r\n    btn.textContent = types[entry.type].emoji;\r\n\r\n    // cycle to next type\r\n    btn.onclick = () => {\r\n        btn.classList.remove('type-' + entry.type);\r\n        stateManager.updateEntry(entry.id, {type: (entry.type + 1) % types.length});\r\n        btn.textContent = types[entry.type].emoji;\r\n        btn.classList.add('type-' + entry.type);\r\n        updateDayTotal();\r\n    };\r\n\r\n    td.appendChild(btn);\r\n    return td;\r\n}\r\n\r\nfunction createDescriptionCell(entry) {\r\n    const td = document.createElement('td');\r\n    const input = document.createElement('input');\r\n    input.classList.add('description');\r\n    input.type = 'text';\r\n    // console.log(entry);\r\n    input.placeholder = 'Description';\r\n    input.value = entry.desc || '';\r\n    input.oninput = () => {\r\n        // identify entry type based on description\r\n        const identifiedType = identifyTicketType(input.value);\r\n        // update entry type and row icon\r\n        const row = input.closest('tr');\r\n        const btn = row.querySelector(locators.entryTypeBtn);\r\n        btn.textContent = types[identifiedType].emoji;\r\n        stateManager.updateEntry(entry.id, {desc: input.value, type: identifiedType});\r\n        updateDayTotal();\r\n    };\r\n    input.addEventListener('keydown', e => {\r\n        if ((e.key === 'Backspace' || e.key === 'Delete') && input.value === '') {\r\n            const row = input.closest('tr');\r\n            const btn = row.querySelector(locators.entryDeleteBtn);\r\n            btn.click();\r\n        }\r\n    });\r\n    td.appendChild(input);\r\n    return td;\r\n}\r\n\r\n// Delete and Drag\r\n\r\nfunction createDeleteCell(index) {\r\n    const td = document.createElement('td');\r\n    const deleteBtn = document.createElement('button');\r\n    td.classList.add('actions');\r\n    deleteBtn.classList.add('action', 'delete');\r\n    deleteBtn.textContent = 'x';\r\n    deleteBtn.onclick = () => {\r\n        if (confirm('Delete this entry?')) {\r\n            stateManager.deleteEntry(index);\r\n            renderAll();\r\n        }\r\n    };\r\n\r\n    td.appendChild(deleteBtn);\r\n    return td;\r\n}\r\n\r\nfunction createDragHandleCell() {\r\n    const td = document.createElement('td');\r\n    const handle = document.createElement('span');\r\n    td.classList.add('actions');\r\n    handle.classList.add('action', 'drag-handle');\r\n    handle.textContent = '\u2630';\r\n    handle.title = 'Drag to reorder';\r\n    handle.style.cursor = 'grab';\r\n    td.appendChild(handle);\r\n    return td;\r\n}\r\n\r\nfunction initSmoothRowDnD(tbody, entries) {\r\n    const scrollContainer = tbody.parentElement; // the scrollable wrapper\r\n\r\n    // helper to get current entry rows (not gap rows)\r\n    const getEntryRows = () => [...tbody.querySelectorAll('tr:not(.gap-row)')];\r\n\r\n    getEntryRows().forEach((tr) => {\r\n        const handle = tr.querySelector('.drag-handle');\r\n        if (!handle) return;\r\n\r\n        let startY, startX, startIndex;\r\n        let dragEl = null;\r\n        let placeholder = null;\r\n        let draggingRow = null;\r\n        let rafId = null;\r\n\r\n        const onPointerMove = (e) => {\r\n            if (!dragEl) return;\r\n            const dy = e.clientY - startY;\r\n            const dx = e.clientX - startX;\r\n            dragEl.style.transform = `translate(${dx}px, ${dy}px)`;\r\n            maybeAutoScroll(e);\r\n            movePlaceholder(e.clientY);\r\n        };\r\n\r\n        const onPointerUp = (/*e*/) => {\r\n            if (!dragEl) return;\r\n\r\n            // compute final index as index of placeholder among entry rows\r\n            const nonGapRows = getEntryRows();\r\n            const finalIndex = nonGapRows.indexOf(placeholder);\r\n\r\n            cleanup();\r\n\r\n            if (finalIndex !== -1 && finalIndex !== startIndex) {\r\n                stateManager.moveEntry(startIndex, finalIndex);\r\n                renderAll();\r\n            } else {\r\n                // unchanged -> just re-render to restore UI/gaps\r\n                renderAll();\r\n            }\r\n        };\r\n\r\n        const onPointerDown = (e) => {\r\n            // only primary button\r\n            if (e.button !== 0) return;\r\n            e.preventDefault();\r\n\r\n            draggingRow = tr;\r\n            // compute start index among current entry rows\r\n            startIndex = getEntryRows().indexOf(tr);\r\n\r\n            const rect = tr.getBoundingClientRect();\r\n            startY = e.clientY;\r\n            startX = e.clientX;\r\n\r\n            // create floating clone\r\n            dragEl = tr.cloneNode(true);\r\n            dragEl.style.position = 'fixed';\r\n            dragEl.style.left = rect.left + 'px';\r\n            dragEl.style.top = rect.top + 'px';\r\n            dragEl.style.width = rect.width + 'px';\r\n            dragEl.style.pointerEvents = 'none';\r\n            dragEl.style.zIndex = 9999;\r\n            dragEl.style.transform = 'translate(0,0)';\r\n            dragEl.style.boxShadow = '0 8px 24px rgba(0,0,0,.18)';\r\n            dragEl.style.borderRadius = '6px';\r\n            dragEl.style.opacity = '0.98';\r\n            dragEl.style.willChange = 'transform';\r\n            dragEl.classList.add('drag-floating');\r\n            document.body.appendChild(dragEl);\r\n\r\n            // create placeholder row with same height and same number of cells\r\n            placeholder = document.createElement('tr');\r\n            placeholder.className = 'drag-placeholder';\r\n            placeholder.style.height = rect.height + 'px';\r\n            const colCount = tr.children.length;\r\n            for (let c = 0; c < colCount; c++) {\r\n                placeholder.appendChild(document.createElement('td'));\r\n            }\r\n\r\n            // insert placeholder where the row was, then remove the real row\r\n            tbody.insertBefore(placeholder, tr);\r\n            tbody.removeChild(tr);\r\n\r\n            // global listeners\r\n            document.addEventListener('pointermove', onPointerMove);\r\n            document.addEventListener('pointerup', onPointerUp, {once: true});\r\n        };\r\n\r\n        handle.addEventListener('pointerdown', onPointerDown);\r\n\r\n        function cleanup() {\r\n            // stop autoscroll RAF if any\r\n            cancelAnimationFrame(rafId);\r\n\r\n            // remove floating clone\r\n            if (dragEl && dragEl.parentNode) dragEl.parentNode.removeChild(dragEl);\r\n            dragEl = null;\r\n\r\n            // restore the original row before removing placeholder\r\n            if (placeholder && placeholder.parentNode) {\r\n                placeholder.parentNode.insertBefore(draggingRow, placeholder);\r\n                placeholder.parentNode.removeChild(placeholder);\r\n            }\r\n            placeholder = null;\r\n\r\n            // clear references\r\n            draggingRow = null;\r\n\r\n            // remove pointermove if still attached (safe)\r\n            document.removeEventListener('pointermove', onPointerMove);\r\n        }\r\n\r\n        function movePlaceholder(pointerClientY) {\r\n            const entryRows = getEntryRows().filter(r => r !== draggingRow);\r\n\r\n            // take BEFORE positions\r\n            const firstRects = new Map(entryRows.map(r => [r, r.getBoundingClientRect()]));\r\n\r\n            let target = null;\r\n            for (const r of entryRows) {\r\n                const rrect = r.getBoundingClientRect();\r\n                const midpoint = rrect.top + rrect.height / 2;\r\n                if (pointerClientY < midpoint) {\r\n                    target = r;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (target) {\r\n                if (placeholder.nextSibling !== target) {\r\n                    tbody.insertBefore(placeholder, target);\r\n                }\r\n            } else {\r\n                if (placeholder !== tbody.lastElementChild) {\r\n                    tbody.appendChild(placeholder);\r\n                }\r\n            }\r\n\r\n            // take AFTER positions\r\n            const lastRects = new Map(entryRows.map(r => [r, r.getBoundingClientRect()]));\r\n\r\n            animateReorder(entryRows, firstRects, lastRects);\r\n        }\r\n\r\n        function maybeAutoScroll(e) {\r\n            const containerRect = scrollContainer.getBoundingClientRect();\r\n            const threshold = 36;\r\n            const maxStep = 18;\r\n            let delta = 0;\r\n            if (e.clientY < containerRect.top + threshold) {\r\n                delta = -maxStep * ((containerRect.top + threshold - e.clientY) / threshold);\r\n            } else if (e.clientY > containerRect.bottom - threshold) {\r\n                delta = maxStep * ((e.clientY - (containerRect.bottom - threshold)) / threshold);\r\n            }\r\n\r\n            if (delta !== 0) {\r\n                cancelAnimationFrame(rafId);\r\n                const tick = () => {\r\n                    scrollContainer.scrollTop += delta;\r\n                    rafId = requestAnimationFrame(tick);\r\n                };\r\n                rafId = requestAnimationFrame(tick);\r\n            } else {\r\n                cancelAnimationFrame(rafId);\r\n            }\r\n        }\r\n\r\n        function animateReorder(rows, firstRects, lastRects) {\r\n            rows.forEach(r => {\r\n                const first = firstRects.get(r);\r\n                const last = lastRects.get(r);\r\n                if (!first || !last) return;\r\n\r\n                const dx = first.left - last.left;\r\n                const dy = first.top - last.top;\r\n\r\n                if (dx || dy) {\r\n                    r.style.transform = `translate(${dx}px, ${dy}px)`;\r\n                    r.style.transition = 'none';\r\n                    r.offsetHeight; // force reflow\r\n                    r.style.transform = '';\r\n                    r.style.transition = 'transform 150ms ease';\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n// Gap Row\r\n\r\nfunction createGapRow(minutes, isOverlap = false) {\r\n    const tr = document.createElement('tr');\r\n    tr.classList.add('gap-row');\r\n    tr.appendChild(document.createElement('td'));\r\n    tr.appendChild(document.createElement('td'));\r\n\r\n    const desc = document.createElement('td');\r\n    const descInput = document.createElement('input');\r\n    descInput.type = 'text';\r\n    descInput.value = `${formatMinutes(minutes)} ${isOverlap ? 'overlap' : 'gap'}`;\r\n    descInput.readOnly = true;\r\n    descInput.classList.add('description');\r\n    desc.appendChild(descInput);\r\n    tr.appendChild(desc);\r\n    tr.appendChild(document.createElement('td'));\r\n    tr.appendChild(document.createElement('td'));\r\n    tr.appendChild(document.createElement('td'));\r\n    tr.appendChild(document.createElement('td'));\r\n    return tr;\r\n}\r\n\r\nfunction updateGapAfter(prevEntry) {\r\n    const entries = stateManager.getEntries();\r\n    const tbody = elements.hoursTableBody;\r\n    const index = entries.indexOf(prevEntry);\r\n    if (index === -1) return;\r\n\r\n    const nextEntry = entries[index + 1];\r\n\r\n    // Remove old gap/overlap row if exists\r\n    if (gapRows.has(prevEntry.id)) {\r\n        gapRows.get(prevEntry.id).remove();\r\n        gapRows.delete(prevEntry.id);\r\n    }\r\n\r\n    if (nextEntry && prevEntry.end && nextEntry.start) {\r\n        const prevEnd = parseHM(prevEntry.end);\r\n        const nextStart = parseHM(nextEntry.start);\r\n        const diff = nextStart - prevEnd;\r\n\r\n        if (diff !== 0) { // gap or overlap\r\n            const gapRow = createGapRow(Math.abs(diff), diff < 0); // negative \u2192 overlap\r\n            gapRows.set(prevEntry.id, gapRow);\r\n\r\n            const prevRow = tbody.querySelector(`tr[data-entry-id=\"${prevEntry.id}\"]`);\r\n            if (prevRow) {\r\n                tbody.insertBefore(gapRow, prevRow.nextSibling);\r\n            }\r\n        }\r\n    }\r\n}", "import {elements} from \"../constants\";\r\nimport {renderSummary} from \"./render_summary_table\";\r\nimport {renderTabs} from \"./render_tabs\";\r\nimport {updateDayTotal} from \"./render_day_summary\";\r\nimport {renderHoursTable} from \"./render_hours_table\";\r\n\r\nrenderAll();\r\n\r\nexport function renderAll(scrollBottom = false) {\r\n    // return\r\n    renderTabs();\r\n    renderHoursTable();\r\n    updateDayTotal();\r\n    renderSummary();\r\n\r\n    if (scrollBottom) {\r\n        elements.hoursTableBody.parentElement.scrollTop = elements.hoursTableBody.scrollHeight;\r\n    }\r\n}", "import {formatDayName, todayKey} from \"../utils\";\r\nimport {stateManager} from \"../data\";\r\nimport {elements} from \"../constants\";\r\nimport {renderAll} from \"./controller\";\r\n\r\nexport function renderTabs() {\r\n    const today = todayKey();\r\n    const allDays = stateManager.getDayNames();\r\n    allDays.add(today);\r\n\r\n    const otherDays = Array.from(allDays)\r\n        .filter(d => d !== today)\r\n        .sort((a, b) => b.localeCompare(a));\r\n    const orderedDays = [today, ...otherDays];\r\n\r\n    elements.tabs.innerHTML = '';\r\n\r\n    orderedDays.forEach(day => {\r\n        const tabEl = document.createElement('div');\r\n        tabEl.className = 'tab' + (day === stateManager.openDay ? ' active' : '');\r\n        tabEl.title = day;\r\n\r\n        const textEl = document.createElement('span');\r\n        textEl.textContent = formatDayName(day);\r\n        tabEl.appendChild(textEl);\r\n\r\n        const deleteBtn = document.createElement('span');\r\n        deleteBtn.className = 'delete-btn';\r\n        deleteBtn.textContent = '\u00D7';\r\n        deleteBtn.addEventListener('click', (e) => {\r\n            e.stopPropagation(); // prevent tab click\r\n            deleteOpenDay();\r\n        });\r\n        tabEl.appendChild(deleteBtn);\r\n\r\n        tabEl.addEventListener('click', () => {\r\n            stateManager.setOpenDay(day);\r\n            renderAll();\r\n        });\r\n\r\n        elements.tabs.appendChild(tabEl);\r\n    });\r\n}\r\n\r\nexport function deleteOpenDay() {\r\n    if (!confirm('Delete all entries for this day? This cannot be undone.')) {\r\n        return;\r\n    }\r\n    stateManager.deleteDay(stateManager.openDay);\r\n    stateManager.setOpenDay(todayKey());\r\n    renderAll();\r\n}\r\n\r\nexport function onAddDay() {\r\n    let newDate = ''; //elements.addDayInput.value;\r\n    if (newDate) {\r\n        stateManager.setOpenDay(newDate);\r\n        renderAll();\r\n    }\r\n}", "import {focusLastDescription, parseHM, timeNow} from '../utils';\r\nimport {renderAll} from './controller';\r\nimport {locators} from '../constants';\r\nimport {stateManager} from \"../data\";\r\nimport {isSummaryDisplayed, toggleSummary} from \"./render_summary_table\";\r\n\r\nfunction startNow() {\r\n    stateManager.newEntry(timeNow(), '', '', 0);\r\n    renderAll(true);\r\n    focusLastDescription();\r\n}\r\n\r\nfunction startSinceLast() {\r\n    const lastEntry = stateManager.getLastEntry();\r\n    if (lastEntry && lastEntry.end) {\r\n        const lastEnd = parseHM(lastEntry.end);\r\n        const nowHM = parseHM(timeNow());\r\n        if (nowHM >= lastEnd) {\r\n            stateManager.newEntry(lastEntry.end, '', '', 3);\r\n            renderAll(true);\r\n            focusLastDescription();\r\n        }\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction stopLast() {\r\n    const stoppedAnEntry = stateManager.stopLastRunningEntry();\r\n    renderAll(true);\r\n    return stoppedAnEntry;\r\n}\r\n\r\ndocument.addEventListener('keydown', onDocumentKeyDown);\r\n\r\n/**\r\n * Navigate to other entries\r\n */\r\nfunction handleArrowNavigation(e, active) {\r\n    const inputs = Array.from(document.querySelectorAll(locators.entryDescription));\r\n    if (inputs.length === 0) return;\r\n\r\n    let index = inputs.indexOf(active);\r\n\r\n    // If nothing valid is focused \u2192 pick last input\r\n    if (index === -1) {\r\n        inputs[inputs.length - 1].focus();\r\n        e.preventDefault();\r\n        return;\r\n    }\r\n\r\n    if (e.key === 'ArrowUp' && index > 0) {\r\n        inputs[index - 1].focus();\r\n        e.preventDefault();\r\n    } else if (e.key === 'ArrowDown' && index < inputs.length - 1) {\r\n        inputs[index + 1].focus();\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\n/**\r\n * Navigate between time inputs with Tab / Shift+Tab\r\n */\r\nfunction handleTimeNavigation(e, active) {\r\n    const inputs = Array.from(document.querySelectorAll(locators.entryTime));\r\n    if (inputs.length === 0) return;\r\n\r\n    let index = inputs.indexOf(active);\r\n\r\n    if (index === -1) {\r\n        inputs[0].focus();\r\n        e.preventDefault();\r\n        return;\r\n    }\r\n\r\n    const movePrev = e.shiftKey && e.key === 'Tab';\r\n    const moveNext = !e.shiftKey && e.key === 'Tab';\r\n\r\n    if (movePrev && index > 0) {\r\n        inputs[index - 1].focus();\r\n        e.preventDefault();\r\n    } else if (moveNext && index < inputs.length - 1) {\r\n        inputs[index + 1].focus();\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\nexport function onDocumentKeyDown(e) {\r\n    // ignore modifier keys\r\n    if (e.metaKey || e.ctrlKey || e.altKey) return;\r\n\r\n    const active = document.activeElement;\r\n    const focusedOnInput = active && active.tagName === 'INPUT';\r\n    const focusedOnTime = focusedOnInput && active.type === 'time';\r\n    const focusedOnText = focusedOnInput && active.type === 'text';\r\n\r\n    // toggle edit/summary view\r\n    if (!focusedOnInput && (e.key === 'v' || e.key === 'V')) {\r\n        toggleSummary();\r\n        return;\r\n    }\r\n\r\n    // prevent edit actions on hours table if summary is displayed\r\n    if (isSummaryDisplayed()) {\r\n        return;\r\n    }\r\n\r\n    // commit/unfocus an active input\r\n    if (focusedOnInput && (e.key === 'Enter' || e.key === 'Escape')) {\r\n        active.blur();\r\n        return;\r\n    }\r\n\r\n    // stop the last entry or start a new one from now\r\n    if (!focusedOnInput && e.key === 'Enter') {\r\n        if (!stopLast()) {\r\n            startNow();\r\n            return;\r\n        }\r\n    }\r\n\r\n    // stops the last entry or starts a new one since the last end time\r\n    if (!focusedOnInput && e.key === ' ') {\r\n        if (!stopLast()) {\r\n            e.preventDefault();\r\n            if (!startSinceLast()) {\r\n                startNow();\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    // focus to previous/next entry description\r\n    if (!focusedOnTime && (e.key === 'ArrowUp' || e.key === 'ArrowDown')) {\r\n        handleArrowNavigation(e, active);\r\n        return;\r\n    }\r\n\r\n    // navigate time fields\r\n    if (focusedOnTime && e.key === 'Tab') {\r\n        handleTimeNavigation(e, active);\r\n        return;\r\n    }\r\n\r\n    // clear time and resets focus\r\n    if (focusedOnTime && e.key === 'Backspace') {\r\n        if (active.value.trim() === '') {\r\n            e.preventDefault();\r\n            active.value = '';\r\n            active.blur();\r\n            active.focus();\r\n        }\r\n    }\r\n}\r\n", "import './src/utils';\r\nimport './src/constants';\r\nimport './src/data';\r\nimport './src/ui/render_tabs';\r\nimport './src/ui/render_day_summary';\r\nimport './src/ui/render_hours_table';\r\nimport './src/ui/render_summary_table';\r\nimport './src/ui/events';\r\nimport './src/ui/controller';"],
  "mappings": "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",
  "names": []
}
