{
  "version": 3,
  "sources": ["../src/elements.js", "../src/utils.js", "../src/state.js", "../src/render.js", "../src/events.js", "../src/main.js"],
  "sourcesContent": ["export const elements = {\r\n    tabs: document.getElementById('tabs'),\r\n    hoursTable: document.getElementById('hoursTable'),\r\n    hoursTableBody: document.getElementById('hoursTableBody'),\r\n    summary: document.getElementById('summary'),\r\n    // buttons\r\n    newBtn: document.getElementById('newBtn'),\r\n    stopBtn: document.getElementById('stopBtn'),\r\n    toggleSummaryBtn: document.getElementById('toggleSummaryBtn'),\r\n    runningPill: document.getElementById('runningPill'),\r\n\r\n    // days\r\n    addDayBtn: document.getElementById('addDayBtn'),\r\n    addDayInput: document.getElementById('addDayInput'),\r\n\r\n    editDayBtn: document.getElementById('editDayBtn'),\r\n    editDayInput: document.getElementById('editDayInput'),\r\n    saveEditDayBtn: document.getElementById('saveEditDayBtn'),\r\n    cancelEditDayBtn: document.getElementById('cancelEditDayBtn'),\r\n\r\n    deleteDayBtn: document.getElementById('deleteDayBtn')\r\n};", "\r\n// Identifiers\r\n\r\nexport function uid() {\r\n    return 'e' + Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\r\n}\r\n\r\nexport function todayKey() {\r\n    const d = new Date();\r\n    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;\r\n}\r\n\r\n// HTML\r\n\r\nexport function findLast(arr, predicate) {\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        if (predicate(arr[i])) return arr[i];\r\n    }\r\n    return null;\r\n}\r\n\r\n// Time\r\n\r\nexport function timeNow() {\r\n    const d = new Date();\r\n    return `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n}\r\n\r\nexport function parseHM(time) {\r\n    if (!time || !/^\\d{2}:\\d{2}$/.test(time)) return null;\r\n    const [h, m] = time.split(':').map(Number);\r\n    if (h > 23 || m > 59) return null;\r\n    return h * 60 + m;\r\n}\r\n\r\n// Format Time\r\n\r\nexport const pad = (n) => String(n).padStart(2, '0');\r\n\r\nexport function formatHM(minutes) {\r\n    const h = Math.floor(minutes / 60);\r\n    const m = minutes % 60;\r\n    return `${h}:${pad(m)}`;\r\n}\r\n\r\nexport function formatMinutes(minutes) {\r\n    const h = Math.floor(minutes / 60);\r\n    const m = minutes % 60;\r\n    if (h > 0) {\r\n        return `${h}h ${m}m`;\r\n    }\r\n    return `${m}m`;\r\n}\r\n\r\n// Format Text\r\n\r\nexport function formatDayName(dateStr) {\r\n    const today = new Date();\r\n    const date = new Date(dateStr);\r\n\r\n    // Normalize time for accurate day difference\r\n    const oneDayMs = 1000 * 60 * 60 * 24;\r\n    const daysDiff = Math.floor((today - date) / oneDayMs);\r\n\r\n    // if (daysDiff === 0) return 'Today';\r\n    // if (daysDiff === 1) return 'Yesterday';\r\n\r\n    const dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n    const dayFullNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n    const dayName = dayNames[date.getDay()];\r\n    const dayFullName = dayFullNames[date.getDay()];\r\n    const month = monthNames[date.getMonth()];\r\n    const day = date.getDate();\r\n\r\n    // Today\r\n    if (daysDiff === 0) return `${month}, ${dayFullName} ${day}`;\r\n\r\n    // This week\r\n    const startOfWeek = new Date(today);\r\n    startOfWeek.setDate(today.getDate() - today.getDay());\r\n    startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n    if (date >= startOfWeek) {\r\n        return dayName; // just the day name\r\n    }\r\n\r\n    // Last week\r\n    const startOfLastWeek = new Date(startOfWeek);\r\n    startOfLastWeek.setDate(startOfWeek.getDate() - 7);\r\n\r\n    if (date >= startOfLastWeek) {\r\n        return `Last ${dayName}`;\r\n    }\r\n\r\n    // Older dates\r\n    return `${day} ${month}`;\r\n}\r\n\r\nexport function escapeHtml(str) {\r\n    return String(str)\r\n        .replaceAll('&', '&amp;')\r\n        .replaceAll('<', '&lt;')\r\n        .replaceAll('>', '&gt;');\r\n}\r\n", "import { todayKey } from './utils.js';\r\nimport {renderAll} from \"./render\";\r\n\r\nconst STORAGE_KEY = 'simpleTimesheetV3';\r\n\r\nlet state = loadState();\r\n\r\nif (!state.days) state.days = {};\r\nif (!state.openDay) state.openDay = todayKey();\r\n\r\nensureDay(state.openDay);\r\nsaveState();\r\n\r\nexport function getState() {\r\n    return state;\r\n}\r\n\r\nexport function loadState() {\r\n    try {\r\n        return JSON.parse(localStorage.getItem(STORAGE_KEY)) || {};\r\n    } catch {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport function saveState() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\r\n}\r\n\r\nexport function ensureDay(day) {\r\n    if (!state.days[day]) state.days[day] = [];\r\n}\r\n\r\nexport function setOpenDay(day) {\r\n    state.openDay = day;\r\n    ensureDay(day);\r\n    saveState();\r\n    renderAll();\r\n}\r\n", "import {elements} from './elements.js';\r\nimport {getState, saveState, setOpenDay} from './state.js';\r\nimport {escapeHtml, findLast, formatDayName, formatHM, formatMinutes, parseHM, todayKey} from './utils.js';\r\n\r\nconst state = getState();\r\nconst gapRows = new Map();\r\n\r\n\r\nexport function renderAll(scrollBottom = false) {\r\n    renderTabs();\r\n    renderTable();\r\n    renderSummary();\r\n    updateRunningUI();\r\n    updateDayTotal();\r\n\r\n    if (scrollBottom) {\r\n        elements.hoursTableBody.parentElement.scrollTop = elements.hoursTableBody.scrollHeight;\r\n    }\r\n}\r\n\r\n// Tabs\r\n\r\nexport function renderTabs() {\r\n    const today = todayKey();\r\n    const allDays = new Set(Object.keys(state.days || {}));\r\n    allDays.add(today);\r\n\r\n    // Order: today first, then others newest to oldest\r\n    const otherDays = Array.from(allDays)\r\n        .filter(d => d !== today)\r\n        .sort((a, b) => b.localeCompare(a));\r\n    const orderedDays = [today, ...otherDays];\r\n\r\n    elements.tabs.innerHTML = '';\r\n\r\n    orderedDays.forEach(day => {\r\n        const tabEl = document.createElement('div');\r\n        tabEl.className = 'tab' + (day === state.openDay ? ' active' : '');\r\n        tabEl.textContent = formatDayName(day);\r\n        tabEl.title = day;\r\n        tabEl.addEventListener('click', () => setOpenDay(day));\r\n        elements.tabs.appendChild(tabEl);\r\n    });\r\n}\r\n\r\n// Table\r\n\r\nexport function renderTable() {\r\n    const entries = state.days[state.openDay] || [];\r\n    const tbody = elements.hoursTableBody;\r\n    tbody.innerHTML = '';\r\n    gapRows.clear();\r\n\r\n    entries.forEach((entry, index) => {\r\n        const row = createTableRow(entry, index, entries);\r\n        tbody.appendChild(row);\r\n\r\n        // Create gap after previous entry\r\n        if (index > 0) updateGapAfter(entries[index - 1]);\r\n    });\r\n}\r\n\r\n\r\nexport function createTableRow(entry, index, entries) {\r\n    const tr = document.createElement('tr');\r\n    tr.dataset.entryId = entry.id;\r\n\r\n    tr.ondragover = (ev) => ev.preventDefault();\r\n    tr.ondrop = (ev) => {\r\n        ev.preventDefault();\r\n        const from = +ev.dataTransfer.getData('text/plain');\r\n        const to = index;\r\n        if (from !== to) {\r\n            const item = entries.splice(from, 1)[0];\r\n            entries.splice(to, 0, item);\r\n            saveState();\r\n            renderAll();\r\n        }\r\n    };\r\n\r\n    const durationCell = createDurationCell();\r\n\r\n    // Create start and end cells and update duration when input changes\r\n    const startCell = createTimeCell(entry, 'start', () => updateDurationCell(entry, durationCell));\r\n    const endCell = createTimeCell(entry, 'end', () => updateDurationCell(entry, durationCell));\r\n\r\n    tr.appendChild(startCell);\r\n    tr.appendChild(endCell);\r\n    tr.appendChild(durationCell);\r\n    tr.appendChild(createDescriptionCell(entry));\r\n    tr.appendChild(createDeleteCell(index, entries));\r\n    tr.appendChild(createDragHandleCell(index));\r\n\r\n    // Initialize duration immediately\r\n    updateDurationCell(entry, durationCell);\r\n\r\n    return tr;\r\n}\r\n\r\nexport function createTimeCell(entry, field, onChange) {\r\n    const td = document.createElement('td');\r\n    const input = document.createElement('input');\r\n    input.type = 'time';\r\n    input.step = 60;\r\n    input.value = entry[field] || '';\r\n\r\n    input.oninput = () => {\r\n        entry[field] = input.value;\r\n        saveState();\r\n        renderSummary();\r\n        updateDayTotal();\r\n\r\n        // Update gap after this entry and gap after previous entry\r\n        const entries = state.days[state.openDay] || [];\r\n        const index = entries.indexOf(entry);\r\n        if (index > 0) updateGapAfter(entries[index - 1]);\r\n        updateGapAfter(entry);\r\n\r\n        if (onChange) onChange();\r\n    };\r\n\r\n    td.appendChild(input);\r\n    return td;\r\n}\r\n\r\nexport function createDurationCell() {\r\n    const td = document.createElement('td');\r\n    td.style.textAlign = 'right';\r\n    td.textContent = '-'; // default\r\n    return td;\r\n}\r\n\r\nexport function updateDurationCell(entry, td) {\r\n    if (entry.start && entry.end) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n        const minutes = end - start;\r\n        if (minutes === 0)\r\n            td.textContent = '';\r\n        else td.textContent = formatMinutes(minutes);\r\n    } else {\r\n        td.textContent = '';\r\n    }\r\n}\r\n\r\nexport function createDescriptionCell(entry) {\r\n    const td = document.createElement('td');\r\n    const input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.placeholder = 'Description';\r\n    input.value = entry.desc || '';\r\n    input.oninput = () => {\r\n        entry.desc = input.value;\r\n        saveState();\r\n        renderSummary();\r\n    };\r\n    td.appendChild(input);\r\n    return td;\r\n}\r\n\r\nexport function createDeleteCell(index, entries) {\r\n    const td = document.createElement('td');\r\n    td.style.textAlign = 'center';\r\n\r\n    const deleteBtn = document.createElement('button');\r\n    deleteBtn.className = 'delete-entry-button';\r\n    deleteBtn.textContent = 'x';\r\n    deleteBtn.onclick = () => {\r\n        if (confirm('Delete this entry?')) {\r\n            entries.splice(index, 1);\r\n            saveState();\r\n            renderAll();\r\n        }\r\n    };\r\n\r\n    td.appendChild(deleteBtn);\r\n    return td;\r\n}\r\n\r\nexport function createDragHandleCell(index) {\r\n    const td = document.createElement('td');\r\n    td.style.textAlign = 'center';\r\n    td.style.cursor = 'grab';\r\n\r\n    const handle = document.createElement('span');\r\n    handle.textContent = '\u2630'; // you can replace with an SVG/icon\r\n    handle.draggable = true;\r\n\r\n    handle.ondragstart = (ev) => {\r\n        ev.dataTransfer.setData('text/plain', index);\r\n\r\n        // Create a temporary clone of the row for drag image\r\n        const tr = handle.closest('tr');\r\n        const dragClone = tr.cloneNode(true);\r\n        dragClone.style.position = 'absolute';\r\n        dragClone.style.top = '-9999px'; // hide offscreen\r\n        document.body.appendChild(dragClone);\r\n\r\n        // Use the clone as the drag image\r\n        ev.dataTransfer.setDragImage(dragClone, 0, 0);\r\n\r\n        // Remove it shortly after\r\n        setTimeout(() => document.body.removeChild(dragClone), 0);\r\n    };\r\n\r\n    td.appendChild(handle);\r\n    return td;\r\n}\r\n\r\nfunction createGapRow(minutes, isOverlap = false) {\r\n    const tr = document.createElement('tr');\r\n    const td = document.createElement('td');\r\n    td.colSpan = 5;\r\n    td.style.textAlign = 'center';\r\n    td.style.fontStyle = 'italic';\r\n    td.style.color = '#666';\r\n    td.textContent = `${formatMinutes(minutes)} ${isOverlap ? 'overlap' : 'gap'}`;\r\n    tr.appendChild(td);\r\n    return tr;\r\n}\r\n\r\nexport function updateGapsAround(entry) {\r\n    const entries = state.days[state.openDay] || [];\r\n    const tbody = elements.hoursTableBody;\r\n    const index = entries.indexOf(entry);\r\n    if (index === -1) return;\r\n\r\n    const prevEntry = entries[index - 1];\r\n\r\n    // All gaps belong to the previous entry\r\n    if (!prevEntry) return;\r\n\r\n    // Compute gap\r\n    if (prevEntry.end && entry.start) {\r\n        const gapMinutes = parseHM(entry.start) - parseHM(prevEntry.end);\r\n\r\n        // Remove old gap if exists\r\n        if (gapRows.has(prevEntry.id)) {\r\n            gapRows.get(prevEntry.id).remove();\r\n            gapRows.delete(prevEntry.id);\r\n        }\r\n\r\n        // Insert new gap if needed\r\n        if (gapMinutes > 0) {\r\n            const gapRow = createGapRow(gapMinutes);\r\n            gapRows.set(prevEntry.id, gapRow);\r\n\r\n            const prevRow = tbody.querySelector(`tr[data-entry-id=\"${prevEntry.id}\"]`);\r\n            if (prevRow) {\r\n                if (prevRow.nextSibling) {\r\n                    tbody.insertBefore(gapRow, prevRow.nextSibling);\r\n                } else {\r\n                    tbody.appendChild(gapRow);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateGapAfter(prevEntry) {\r\n    const entries = state.days[state.openDay] || [];\r\n    const tbody = elements.hoursTableBody;\r\n    const index = entries.indexOf(prevEntry);\r\n    if (index === -1) return;\r\n\r\n    const nextEntry = entries[index + 1];\r\n\r\n    // Remove old gap/overlap row if exists\r\n    if (gapRows.has(prevEntry.id)) {\r\n        gapRows.get(prevEntry.id).remove();\r\n        gapRows.delete(prevEntry.id);\r\n    }\r\n\r\n    if (nextEntry && prevEntry.end && nextEntry.start) {\r\n        const prevEnd = parseHM(prevEntry.end);\r\n        const nextStart = parseHM(nextEntry.start);\r\n        const diff = nextStart - prevEnd;\r\n\r\n        if (diff !== 0) { // gap or overlap\r\n            const gapRow = createGapRow(Math.abs(diff), diff < 0); // negative \u2192 overlap\r\n            gapRows.set(prevEntry.id, gapRow);\r\n\r\n            const prevRow = tbody.querySelector(`tr[data-entry-id=\"${prevEntry.id}\"]`);\r\n            if (prevRow) {\r\n                tbody.insertBefore(gapRow, prevRow.nextSibling);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// Summary\r\n\r\nexport function renderSummary() {\r\n    const entries = state.days[state.openDay] || [];\r\n    const totals = new Map(); // Stores total minutes per key\r\n    const ticketDescriptions = new Map(); // Stores a set of descriptions for each Jira ticket\r\n\r\n    // Count totals for matching entries\r\n    for (const entry of entries) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n\r\n        if (start === null || end === null || end < start) continue;\r\n\r\n        const minutes = end - start;\r\n        const entryDesc = entry.desc || \"(no description)\";\r\n\r\n        // Try to detect a Jira ticket key, e.g. \"TUE-250\"\r\n        const ticketMatch = entryDesc.match(/\\b[a-zA-Z]+-\\d+\\b/);\r\n\r\n        if (!ticketMatch) {\r\n            // No Jira key \u2192 find matching entry, increment total\r\n            totals.set(entryDesc, (totals.get(entryDesc) || 0) + minutes);\r\n        } else {\r\n            // JIRA key \u2192 split key & description\r\n            const ticketKey = ticketMatch[0].toUpperCase();\r\n            const ticketDesc = entryDesc.replace(ticketMatch[0], \"\").trim();\r\n\r\n            // create a set to store unique descriptions\r\n            if (!ticketDescriptions.has(ticketKey))\r\n                ticketDescriptions.set(ticketKey, new Set());\r\n            // store descriptions separately\r\n            if (ticketDesc)\r\n                ticketDescriptions.get(ticketKey).add(ticketDesc);\r\n\r\n            // increment total for the key\r\n            totals.set(ticketKey, (totals.get(ticketKey) || 0) + minutes);\r\n        }\r\n    }\r\n\r\n    // No table\r\n    if (totals.size === 0) {\r\n        elements.summary.innerHTML = '<div class=\"muted\">Summary will appear here for completed entries.</div>';\r\n        return;\r\n    }\r\n\r\n    // Build table\r\n    let html = `\r\n        <table id=\"summaryTable\">\r\n            <thead>\r\n                <tr>\r\n                    <th style=\"text-align: right;\">Total</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n    `;\r\n\r\n    // Build table rows\r\n    [...totals.entries()]\r\n        // Sort alphabetically by description\r\n        .sort((a, b) => a[0].localeCompare(b[0]))\r\n        .forEach(([key, minutes]) => {\r\n            let description = key;\r\n\r\n            // If it's a Jira ticket, append all its grouped notes\r\n            if (ticketDescriptions.has(key)) {\r\n                const ticketDesc = [...ticketDescriptions.get(key)].join(\", \");\r\n                if (ticketDesc)\r\n                    description += \" - \" + ticketDesc;\r\n            }\r\n\r\n            html += `\r\n                <tr>\r\n                    <td style=\"text-align: right;\">${formatMinutes(minutes)}</td>\r\n                    <td>${escapeHtml(description)}</td>\r\n                </tr>\r\n            `;\r\n        });\r\n\r\n    html += \"</tbody></table>\";\r\n    elements.summary.innerHTML = html;\r\n}\r\n\r\nexport function updateDayTotal() {\r\n    const entries = state.days[state.openDay] || [];\r\n    let totalMinutes = 0;\r\n\r\n    for (const entry of entries) {\r\n        const start = parseHM(entry.start);\r\n        const end = parseHM(entry.end);\r\n\r\n        if (start !== null && end !== null && end >= start) {\r\n            totalMinutes += (end - start);\r\n        }\r\n    }\r\n\r\n    elements.toggleSummaryBtn.innerHTML = totalMinutes ? `<span style=\"font-size: 1.25rem\" \">${formatHM(totalMinutes)}</span> View Summary` : 'View Summary';\r\n}\r\n\r\n// Other\r\n\r\nexport function updateRunningUI() {\r\n    const entries = state.days[state.openDay] || [];\r\n    const running = findLast(entries, e => e.start && !e.end);\r\n    elements.runningPill.style.display = running ? 'inline-flex' : 'none';\r\n}\r\n\r\nexport function focusLastDescription() {\r\n    const inputs = elements.hoursTableBody.querySelectorAll('input[type=\"text\"]');\r\n    if (inputs.length) {\r\n        inputs[inputs.length - 1].focus();\r\n    }\r\n}", "import { getState, saveState, setOpenDay, ensureDay } from './state.js';\r\nimport { timeNow, findLast, uid, todayKey } from './utils.js';\r\nimport { elements } from './elements.js';\r\nimport { renderAll, focusLastDescription } from './render.js';\r\n\r\nconst state = getState();\r\n\r\n// Start / Stop\r\n\r\nexport function onNew() {\r\n    const entries = state.days[state.openDay];\r\n    const running = findLast(entries, e => e.start && !e.end);\r\n\r\n    if (running) running.end = timeNow();\r\n\r\n    entries.push({ id: uid(), start: timeNow(), end: '', desc: '' });\r\n\r\n    saveState();\r\n    renderAll(true);\r\n    focusLastDescription();\r\n}\r\n\r\nexport function onStop() {\r\n    const entries = state.days[state.openDay];\r\n    const running = findLast(entries, e => e.start && !e.end);\r\n\r\n    if (running && !running.end) {\r\n        running.end = timeNow();\r\n        saveState();\r\n        renderAll();\r\n    }\r\n}\r\n\r\n// Summary\r\n\r\nexport function toggleSummary() {\r\n    elements.hoursTable.classList.toggle('hidden');\r\n    elements.summary.classList.toggle('hidden');\r\n}\r\n\r\n// Days\r\n\r\nexport function onAddDay() {\r\n    if (elements.addDayInput.value) {\r\n        setOpenDay(elements.addDayInput.value);\r\n        elements.addDayInput.value = '';\r\n    }\r\n}\r\n\r\nexport function onEditDay() {\r\n    elements.editDayInput.value = state.openDay;\r\n    elements.editDayInput.style.display = 'inline-block';\r\n    elements.saveEditDayBtn.style.display = 'inline-block';\r\n    elements.cancelEditDayBtn.style.display = 'inline-block';\r\n    elements.editDayInput.focus();\r\n}\r\n\r\nexport function onCancelEditDay() {\r\n    elements.editDayInput.style.display = 'none';\r\n    elements.saveEditDayBtn.style.display = 'none';\r\n    elements.cancelEditDayBtn.style.display = 'none';\r\n}\r\n\r\nexport function onSaveEditDay() {\r\n    const newDate = elements.editDayInput.value;\r\n    const oldDate = state.openDay;\r\n\r\n    if (!newDate) {\r\n        alert('Pick a valid date');\r\n        return;\r\n    }\r\n\r\n    if (newDate === oldDate) {\r\n        onCancelEditDay();\r\n        return;\r\n    }\r\n\r\n    // Handle existing target date\r\n    if (state.days[newDate]) {\r\n        if (!confirm('Target day already exists. Merge current entries into that day?')) {\r\n            return;\r\n        }\r\n        // Merge entries\r\n        state.days[newDate] = (state.days[newDate] || []).concat(state.days[oldDate]);\r\n    } else {\r\n        // Move entries\r\n        state.days[newDate] = state.days[oldDate];\r\n    }\r\n\r\n    delete state.days[oldDate];\r\n    state.openDay = newDate;\r\n    saveState();\r\n    renderAll();\r\n    onCancelEditDay();\r\n}\r\n\r\nexport function onDeleteDay() {\r\n    if (!confirm('Delete all entries for this day? This cannot be undone.')) {\r\n        return;\r\n    }\r\n\r\n    delete state.days[state.openDay];\r\n    state.openDay = todayKey();\r\n    ensureDay(state.openDay);\r\n    saveState();\r\n    renderAll();\r\n}", "import { elements } from './elements.js';\r\nimport { renderAll } from './render.js';\r\nimport {\r\n    onNew,\r\n    onStop,\r\n    onAddDay,\r\n    onEditDay,\r\n    onCancelEditDay,\r\n    onSaveEditDay,\r\n    onDeleteDay,\r\n    toggleSummary\r\n} from './events.js';\r\n\r\n// Attach listeners\r\nelements.newBtn.addEventListener('click', onNew);\r\nelements.stopBtn.addEventListener('click', onStop);\r\nelements.toggleSummaryBtn.addEventListener('click', toggleSummary);\r\nelements.addDayBtn.addEventListener('click', onAddDay);\r\nelements.editDayBtn.addEventListener('click', onEditDay);\r\nelements.cancelEditDayBtn.addEventListener('click', onCancelEditDay);\r\nelements.saveEditDayBtn.addEventListener('click', onSaveEditDay);\r\nelements.deleteDayBtn.addEventListener('click', onDeleteDay);\r\n\r\n// Initial render\r\nrenderAll();\r\n"],
  "mappings": "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",
  "names": ["state", "state"]
}
